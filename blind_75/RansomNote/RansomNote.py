

# TODO: Call on the solution class and methods and test varied inputs to see if the solution works.
# TODO: change the solution call to match the name of the new method.

# Main. This is where you test the solution class that was generated by calling on it.
def main():
    print("Hello World!")
    solution_obj = Solution
    retVal = solution_obj.something(solution_obj)
    print(retVal)


# Solution class. Copy over the information from Leetcode.
# SO ANNOYING... ran into indenting issues. Kill me.
# Similar to ValidAnagram solution, except,
# we only care if the magazine note contains all the letters found in the 
# ransomNote (after ransomNote's letters are stored to the map).
# Unlike anagram, we dont care if the magazine has letters that are not contained
# within the map. Just care for the map being emptied after iterating through everything.
class Solution:
    def canConstruct(self, ransomNote: str, magazine: str) -> bool:
        map_store = {}
        for letter in ransomNote:
            if (map_store.get(letter) == None):
                print("test")
                map_store[letter] = 1
            else:
                map_store[letter] = map_store[letter] + 1
        print(map_store)

        for letter in magazine:
            if (not(map_store.get(letter) == None)):
                print(letter)

                if (map_store[letter] != 0):
                    map_store[letter] = map_store[letter] - 1
                    if (map_store[letter] == 0):
                        map_store.pop(letter)
                else:
                    return False
        return (len(map_store) == 0)
        
       

# If this is the file that is running "__name__ == __main__",
# run the main() function
if __name__ == "__main__":
    main()

# Problem description:
# Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.

# Each letter in magazine can only be used once in ransomNote.

 

# Example 1:

# Input: ransomNote = "a", magazine = "b"
# Output: false

# Example 2:

# Input: ransomNote = "aa", magazine = "ab"
# Output: false

# Example 3:

# Input: ransomNote = "aa", magazine = "aab"
# Output: true

 

# Constraints:

#     1 <= ransomNote.length, magazine.length <= 105
#     ransomNote and magazine consist of lowercase English letters.

