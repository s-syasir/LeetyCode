from typing import List, Optional
# Main. This is where you test the solution class that was generated by calling on it.
def main():
    print("Hello World!")
    
    list1 = ListNode(1)
    list1.next = ListNode(2)
    list1.next.next = ListNode(3)
    list1.next.next.next = ListNode(4)
    list1.next.next.next.next = ListNode(5)
    solution_obj = Solution
    
    retVal = solution_obj.reverseList(solution_obj, list1)
    while retVal != None:
        print(retVal.val)
        retVal = retVal.next

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

# Solution class. Copy over the information from Leetcode.
# Doubt this is the best solution, but iterate through the list once. Store all values and their relative location
# in a map. Key = position of node, value = value of node. Sucks, O(N) storage and traversal.
# Better solution, iterate through the list with two pointers previous and current.
# Iterate through all the nodes. First thing, store the next node and then set current.next to the previous value
# then set the previous to point to the current and then move the current ot the stored next node and the iterator
# repeats.
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
       prev = None
       current = head
       while current:
           next_node = current.next
           current.next = prev
           prev = current
           current = next_node
       return prev

# If this is the file that is running "__name__ == __main__",
# run the main() function
if __name__ == "__main__":
    main(

# Problem description:
# Given the head of a singly linked list, reverse the list, and return the reversed list.

 

# Example 1:

# Input: head = [1,2,3,4,5]
# Output: [5,4,3,2,1]

# Example 2:

# Input: head = [1,2]
# Output: [2,1]

# Example 3:

# Input: head = []
# Output: []

 

# Constraints:

#     The number of nodes in the list is the range [0, 5000].
#     -5000 <= Node.val <= 5000

 

# Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?