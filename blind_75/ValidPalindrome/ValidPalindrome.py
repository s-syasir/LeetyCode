# Main. This is where you test the solution class that was generated by calling on it.
def main():
    print("Hello World!")
    solution_obj = Solution
    # input = "A man, a plan, a canal: Panama"
    input = "0P"
    output = solution_obj.isPalindrome(input)
    print(output)

# The logic for this problem is simple. Iterate from i = 0 to len/2
# and from j = len -1 to len / 2. If there's a letter in between
# that isn't the same, then it's not a palindrome. Simple, palindrome
# are always symmetrical around a middle letter (racecar), so yeah.
# Anyway, everything else that's written before the palCheck for loop
# is to remove non-letter characters, and catch edge cases like len(string) == 1
class Solution:
    def isPalindrome(input):
        validChars = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o', 'p', 'q', 'r', 's', 't','u','v','w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
        input = input.lower()
        print(input)
        palCheck = ""

        for char in input:
            if validChars.__contains__(char):
                palCheck += char

        if len(palCheck) == 1:
            return False

        halfLength = (int) (len(palCheck) / 2)
        j = len(palCheck) - 1
        for i in range (0, halfLength):
            if (palCheck[i] != palCheck[j]):
                return False
            j-= 1
        return True


# If this is the file that is running "__name__ == __main__",
# run the main() function
if __name__ == "__main__":
    main()

# Problem description:
# A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.

# Given a string s, return true if it is a palindrome, or false otherwise.



# Example 1:

# Input: s = "A man, a plan, a canal: Panama"
# Output: true
# Explanation: "amanaplanacanalpanama" is a palindrome.
# Example 2:

# Input: s = "race a car"
# Output: false
# Explanation: "raceacar" is not a palindrome.
# Example 3:

# Input: s = " "
# Output: true
# Explanation: s is an empty string "" after removing non-alphanumeric characters.
# Since an empty string reads the same forward and backward, it is a palindrome.


# Constraints:

# 1 <= s.length <= 2 * 105
# s consists only of printable ASCII characters.