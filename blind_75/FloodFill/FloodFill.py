
from typing import List

# Main. This is where you test the solution class that was generated by calling on it.
def main():
    print("Hello World!")
    solution_obj = Solution
    image = [[1,1,1],[1,1,0],[1,0,1]]
    print("TEST")
    print(len(image[0]))
    sr = 1
    sc = 1
    color = 2
    retVal = solution_obj.floodFill(solution_obj, image, sr, sc, color)
    print(retVal)

# Logic:
# This screams of recursion? Or like going deeper and deeper making the change until
# nothing else can change, and then coming back and changing everything that you didnt
# change along the way. The idea is that you start image[sr][sc], you go up (sc-1), at
# image[sr][sc-1], go up again, keep going up until at edge of array or no more matching
# values with image[sr][sc], once at edge/no more matching, return and change each matching one to color. Then at each iteration go left, right and then lastly go down.
# NOTE: couldnt figure out issues via debugging. Upon googling, my logic was sound,
# however, cant have the image[sr][sc] != color_store in the same if statement as the
# sr sc being out of bounds because ... if they're out of bounds, the image[sr][sc]
# statement has errors... duh. Secondly, the changing of the color has
# has to occur before the recursion/DFS the reason why is because the array will
# find a circle to move in where there's enough image pixels that are equal to the
# color and never gets a chance to change, therefore it has to be changed before.
class Solution:
    def floodFill(self, image: List[List[int]], sr: int, sc: int, color: int) -> List[List[int]]:
        def floodFillHelper(self, image: List[List[int]], sr: int, sc: int, color: int, color_store: int) -> List[List[int]]:
            retVal = image
            if (sr >= len(image) or sr < 0 or sc >= len(image[0]) or sc < 0):
                return retVal
            if (image[sr][sc] != color_store):
                return retVal
            else:
                # Go "up", as long as "pixels connected 4-directionally match image[
                # [sc], and any pixels connected to those pixels (4-directionally)also
                #  match image[sr][sc], then go left then right then down
                # print(sr)
                # print(sc)
                if (image[sr][sc] == color_store):
                    image[sr][sc] = color
                retVal = floodFillHelper(self, image, sr, sc-1, color, color_store)
                retVal = floodFillHelper(self, image, sr-1, sc, color, color_store)
                retVal = floodFillHelper(self, image, sr+1, sc, color, color_store)
                retVal = floodFillHelper(self, image, sr, sc+1, color, color_store)

            return retVal

        retVal = floodFillHelper(self, image, sr, sc, color, image[sr][sc])
        return retVal

# If this is the file that is running "__name__ == __main__",
# run the main() function
if __name__ == "__main__":
    main()

# Problem description:
# An image is represented by an m x n integer grid image where image[i][j] represents the pixel value of the image.

# You are also given three integers sr, sc, and color. You should perform a flood fill on the image starting from the pixel image[sr][sc].

# To perform a flood fill, consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with color.

# Return the modified image after performing the flood fill.



# Example 1:


# Input: image = [[1,1,1],[1,1,0],[1,0,1]], sr = 1, sc = 1, color = 2
# Output: [[2,2,2],[2,2,0],[2,0,1]]
# Explanation: From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.
# Note the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.
# Example 2:

# Input: image = [[0,0,0],[0,0,0]], sr = 0, sc = 0, color = 0
# Output: [[0,0,0],[0,0,0]]
# Explanation: The starting pixel is already colored 0, so no changes are made to the image.


# Constraints:

# m == image.length
# n == image[i].length
# 1 <= m, n <= 50
# 0 <= image[i][j], color < 216
# 0 <= sr < m
# 0 <= sc < n