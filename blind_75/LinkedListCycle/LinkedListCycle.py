
from typing import Optional

# Main. This is where you test the solution class that was generated by calling on it.
def main():
    print("Hello World!")

    list1 = ListNode(3)
    list1.next = ListNode(2)
    list1.next.next = ListNode(0)
    list1.next.next.next = ListNode(-4)
    list1.next.next.next.next = list1.next


    solution_obj = Solution
    retVal = solution_obj.hasCycle(solution_obj, list1)
    print(retVal)

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

# Solution class. Copy over the information from Leetcode.
# Logic: store if you've seen a specific object/node of the LinkedList before into a hashmap.
# Why Hashmap? Instant access to see if you've seen before. Simply go through the linkedlist,
# storing each node to the hashmap. If the node you encounter, you've seen before, return true,
# else at the end of the linkedlist return false. Simple. This is O(N) traversal, O(N) space.
# THE COOL thing that I would have never ever thought of is Floyd's Cycle-Finding Algorithm.
# At the start set two pointers. One at root and one at root+1. Pointer 1 = Pointer1.next at each iteration
# but pointer2 = Pointer2.next.next at every iteration. If pointer1 ever meets pointer2 at any point, there is a loop.
# Why? Idk, it just does innit. Run enough examples, it works.
class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        seen_before = {}
        while head:
            if (head in seen_before):
                return True
            seen_before[head] = True
            head = head.next
        
        return False
        

# If this is the file that is running "__name__ == __main__",
# run the main() function
if __name__ == "__main__":
    main()

# Problem description:
# Given head, the head of a linked list, determine if the linked list has a cycle in it.

# There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

# Return true if there is a cycle in the linked list. Otherwise, return false.

 

# Example 1:

# Input: head = [3,2,0,-4], pos = 1
# Output: true
# Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).

# Example 2:

# Input: head = [1,2], pos = 0
# Output: true
# Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.

# Example 3:

# Input: head = [1], pos = -1
# Output: false
# Explanation: There is no cycle in the linked list.

 

# Constraints:

#     The number of the nodes in the list is in the range [0, 104].
#     -105 <= Node.val <= 105
#     pos is -1 or a valid index in the linked-list.

 

# Follow up: Can you solve it using O(1) (i.e. constant) memory?

