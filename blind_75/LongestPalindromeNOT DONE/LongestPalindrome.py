

# TODO: Call on the solution class and methods and test varied inputs to see if the solution works.
# TODO: change the solution call to match the name of the new method.

# Main. This is where you test the solution class that was generated by calling on it.
def main():
    print("Hello World!")
    solution_obj = Solution
    input = "abccccdd"
    retVal = solution_obj.longestPalindrome(solution_obj, input)
    print(retVal)

# Solution class. Copy over the information from Leetcode.
# Idea: store all the 
class Solution:
    def longestPalindrome(self, s: str) -> int:
        map_store = {}
        for letter in s:
            if letter in map_store:
                map_store[letter] = map_store[letter] + 1
            else:
                map_store[letter] = 1
        print(map_store)
        maxlength = 0
        maxOdd = 0
        for key in map_store:
            if (map_store[key] %2 == 0):
                maxlength += map_store[key]
            else:
                if (map_store[key] > maxOdd):
                    maxOdd = map_store[key]

        return maxlength + maxOdd


# If this is the file that is running "__name__ == __main__",
# run the main() function
if __name__ == "__main__":
    main()

# Problem description:
# Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.

# Letters are case sensitive, for example, "Aa" is not considered a palindrome here.

 

# Example 1:

# Input: s = "abccccdd"
# Output: 7
# Explanation: One longest palindrome that can be built is "dccaccd", whose length is 7.

# Example 2:

# Input: s = "a"
# Output: 1
# Explanation: The longest palindrome that can be built is "a", whose length is 1.

 

# Constraints:

#     1 <= s.length <= 2000
#     s consists of lowercase and/or uppercase English letters only.