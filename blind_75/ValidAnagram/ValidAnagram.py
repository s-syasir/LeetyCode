

# TODO: Call on the solution class and methods and test varied inputs to see if the solution works.
# TODO: change the solution call to match the name of the new method.

# Main. This is where you test the solution class that was generated by calling on it.
def main():
    print("Hello World!")
    solution_obj = Solution
    input1 = "anagram"
    input2 = "nagaram"
    output = solution_obj.isAnagram(input1,input2)
    print(output)


# Logic: you store all letters and their quantity in word1 to a map of: (char, int)
# Where char = letter, int = quantity. Once there, then go over input2,
# if there's ever a letter that occurs that goes above the quantity in the map
# (You've encountered 3 As so far and there's another but there's only 3 in the map)
# Or if you encounter a letter that doesn't exist in the map at all, then break out early
# and return false. Simple.
class Solution:
    def isAnagram(input1, input2):
        if (len(input1) != len(input2)):
            return False
        letterMap = {}
        for char in input1:
            count = 0
            if (letterMap.get(char) == None):
                letterMap[char] = 1
            else:
                letterMap[char] = letterMap[char] + 1

        for char in input2:
            if (letterMap.get(char) == None):
                return False
            else:
                if (letterMap[char] != 0):
                    letterMap[char] = letterMap[char] - 1
                    if (letterMap[char] == 0):
                        letterMap.pop(char)
                else:
                    return False
        return (len(letterMap) == 0)


# If this is the file that is running "__name__ == __main__",
# run the main() function
if __name__ == "__main__":
    main()

# Problem description:
# Given two strings s and t, return true if t is an anagram of s, and false otherwise.

# An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.



# Example 1:

# Input: s = "anagram", t = "nagaram"
# Output: true
# Example 2:

# Input: s = "rat", t = "car"
# Output: false


# Constraints:

# 1 <= s.length, t.length <= 5 * 104
# s and t consist of lowercase English letters.


# Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?

