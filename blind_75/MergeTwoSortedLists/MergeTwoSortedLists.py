from typing import Optional

# Main. This is where you test the solution class that was generated by calling on it.
def main():
    print("Hello World!")
    solution_obj = Solution

    list1 = ListNode(1)
    list1.next = ListNode(2)
    list1.next.next = ListNode(4)

    list2 = ListNode(1)
    list2.next = ListNode(3)
    list2.next.next = ListNode(4)

    retVal = solution_obj.mergeTwoLists(solution_obj, list1, list2)

    while retVal != None:
        print(retVal.val)
        retVal = retVal.next


class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

# Solution class. Copy over the information from Leetcode.
# Idea: we need a pointer that we return ourself and a pointer that will iterate through
# the returned value and add to it from the linkedlists.
# Logic: use a while loop to iterate through a linkedlists (basic CSE 143 logic)
# The while loop condition is if either one of the lists is empty. In the while loop,
# compare the values between list1 and list2, if list1's node value is less than list2,
# then append that value to the returned value, else vice-versa.
# Leave the while loop once either one of the lists is empty
# and just append the non-empty list to the end of the returned value.
# Return the returned value.
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        traverser = ListNode()
        retVal = traverser

        while (list1 != None and list2 != None):
            if (list1.val < list2.val):
                print("list1")
                traverser.next = ListNode(list1.val)
                list1 = list1.next
                traverser = traverser.next
            else:
                print("list2")
                traverser.next = ListNode(list2.val)
                list2 = list2.next
                traverser = traverser.next

        if (list1 == None):
           traverser.next = list2
        if (list2 == None):
            traverser.next = list1

        return retVal.next



# If this is the file that is running "__name__ == __main__",
# run the main() function
if __name__ == "__main__":
    main()

# Problem description:
# You are given the heads of two sorted linked lists list1 and list2.

# Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.

# Return the head of the merged linked list.



# Example 1:


# Input: list1 = [1,2,4], list2 = [1,3,4]
# Output: [1,1,2,3,4,4]
# Example 2:

# Input: list1 = [], list2 = []
# Output: []
# Example 3:

# Input: list1 = [], list2 = [0]
# Output: [0]


# Constraints:

# The number of nodes in both lists is in the range [0, 50].
# -100 <= Node.val <= 100
# Both list1 and list2 are sorted in non-decreasing order.