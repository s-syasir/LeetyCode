from re import L
from typing import List

# TODO: Call on the solution class and methods and test varied inputs to see if the solution works.
# TODO: change the solution call to match the name of the new method.

# Main. This is where you test the solution class that was generated by calling on it.
def main():
    print("Hello World!")
    solution_obj = Solution
    coins = [186,419,83,408]
    amount = 6249
    retVal = solution_obj.coinChange(solution_obj, coins, amount)
    print(retVal)


# TODO: change the name of the defined method "something" to the problem name
# TODO: Write out the solution for the problem, writing out the class and method
# TODO: ensure the return value and parameters match the problem

def quickSort(list: List[int], low: int, high: int) -> None:
    if low < high:
        pivot_index = partition(list, low, high)
        quickSort(list, low, pivot_index)
        quickSort(list, pivot_index + 1 , high)

# Implementing Hoare partitioning because he invented quickSort also because
# it's more understandable intuitively.
def partition(list: List[int], low: int, high: int) -> int:
    pivot = list[low]
    i = low - 1
    j = high + 1

    while (True):
        # Increase i until you reach a value that's more than the pivot
        i = i + 1
        while (list[i] < pivot):
            i = i + 1
        # Decrease j until you reach a value that's less than the pivot
        j = j - 1
        while (list[j] > pivot):
            j = j - 1
        # If j crosses i then stop partitioning
        if (i >= j):
            return j
        # Else, just go through and swap list[i] and list[j]
        store = list[i]
        list[i] = list[j]
        list[j] = store

# Solution class. Copy over the information from Leetcode.
class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        if (amount == 0):
            return 0
        quickSort(coins, 0, len(coins)-1)

        index = len(coins) - 1
        runningAmount = amount
        numCoins = 0

        while (index >= 0):
            print(runningAmount)
            while (runningAmount - coins[index] >= 0):
                runningAmount = runningAmount - coins[index]
                numCoins = numCoins + 1
            if (runningAmount == 0):
                return numCoins
            index = index - 1

        return -1

# If this is the file that is running "__name__ == __main__",
# run the main() function
if __name__ == "__main__":
    main()

# Problem description:

